= Description
  A custom expand_path method for Ruby on Windows that doesn't suck.

= The Plan
  The initial implementation will use FFI as a prototype. Once that is
  working and passing all tests, I will convert it to a C extension.

= Things Making It Difficult
  - The taint rules
  - The $DATA handling
  - Drive-current handling
  - The '~' handling

= Specifics On Tilde Handling on Windows
  - A '~' by itself is expanded to ENV['HOME'].
  - If the '~' is immediately followed by any non-path separator character
    then it results in an ArgumentError.
  - If the '~' is preceded by any character, it is treated literally.
  - Any attempt to interpolate '~' if ENV['HOME'] isn't set will result in
    an ArgumentError.

  In short, the '~' character on Windows, unlike Unix, does not allow for user
  expansion. This could be made to work, though with some difficulty.

  Personal thoughts: I've never liked tilde expansion in this method, even on
  Unix, because it's SHELL behavior, not something the OS implements. I realize
  the core developers were trying to be helpful, but here it's just a pain due
  to parsing.

= Specifics on $DATA Handling On Windows
  - Specifically parses out and ignores "::$DATA" IO stream if found.
  - Does not handle other mistakes in the io stream name.
  - All other IO streams are treated literally.

  In other words, it will ignore "::$DATA" but retain ":$DATA".

  Personal thoughts: This is very peculiar. Why is this logic even in here?
  Since when is Ruby in the business of autocorrecting paths? I can only guess
  this was shoehorned in because some core developer got burned by a bad path
  in some form data that delivered a virus onto his system, which seems to be
  the primary usage of alt streams on Windows. But then why only handle the
  default data stream and not others? Anyway, it's crap, and I have no 
  intention of supporting this.
